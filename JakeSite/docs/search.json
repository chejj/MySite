[
  {
    "objectID": "travel/index.html",
    "href": "travel/index.html",
    "title": "Traveling",
    "section": "",
    "text": "“It’s a dangerous business… going out your door. You step onto the road, and if you don’t keep your feet, there’s no knowing where you might be swept off to.” –J.R.R. Tolkien, The Lord of the Rings\n\n\n\nReykjavík - July 2024\n\n\n\n\n\nJökulsárlón - July 2024\n\n\n\n\n\nEllis Island - June 2024\n\n\n\n\n\nLeaning Tower of Eiffel - April 2024\n\n\n\n\n\nTafi Del Valle - April 2023\n\n\n\n\n\nIguazu - April 2023"
  },
  {
    "objectID": "work/index.html",
    "href": "work/index.html",
    "title": "Work Experience",
    "section": "",
    "text": "Python, C++\nProposed automation for early detection of sensor failures of IDOD, DEF, and MFL tools in Python, then rewrote the model in C++ integrated them into in-house Pipeline Inspection Software for Field-Technicians.\nUpdated documentation on setting up C++ environment, and using in-house libraries."
  },
  {
    "objectID": "work/index.html#td-williamson",
    "href": "work/index.html#td-williamson",
    "title": "Work Experience",
    "section": "",
    "text": "Python, C++\nProposed automation for early detection of sensor failures of IDOD, DEF, and MFL tools in Python, then rewrote the model in C++ integrated them into in-house Pipeline Inspection Software for Field-Technicians.\nUpdated documentation on setting up C++ environment, and using in-house libraries."
  },
  {
    "objectID": "work/index.html#lumea",
    "href": "work/index.html#lumea",
    "title": "Work Experience",
    "section": "Lumea",
    "text": "Lumea\n\nIntegrations Manager (DevOps) (June 2022 - Mar 2024)\n\nJavascript, Python, Bash, PostgreSQL\nFounded and trained team of Integration Software Engineers\nOversaw development of over 30 EMR/LIS Integrations\nOversaw migration of several services from on-premise servers to AWS\nSetup dashboards and alerts for AWS services\nImplemented new error tracking and fixes to reduce monthly errors by 70%\nCreated and maintained healthy team environment with 0 employee turnover\nWeekly reports to C-Suite on project progress\n\n\n\nIntegrations Engineer (DevOps) (Feb 2021 - June 2022)\n\nJavascript, Python, Bash, PostgreSQL\nDeveloped Integrations between LIS, EMR and billing services\nBuilt ETL piples for HL7, XML, JSON data containing PHI\nManaged Jira board for various teams to review Integration Status projects\nSet up ShinyApp Dashboard for Account Managers to review Client Integration Status\nSet up ShinyApp Dashboard for Healthcare Providers to review KPI’s such as Pathology diagnosis turn-around time"
  },
  {
    "objectID": "work/index.html#nuskin",
    "href": "work/index.html#nuskin",
    "title": "Work Experience",
    "section": "NuSkin",
    "text": "NuSkin\n\nTechnical Support Spanish Speaking (November 2017 - January 2021)\n\nAnswered phones, chatroom and emails regarding client’s technical issues including device malfunction and website troubleshooting\nWrote reports for overall team performance for call center management\nRewrote Spanish email scripts"
  },
  {
    "objectID": "league/index.html",
    "href": "league/index.html",
    "title": "League of Legends",
    "section": "",
    "text": "Incomplete, please go here to see more of this project.\n\nIntroduction\nLeague of Legends is a MOBA (Multiplayer Online Battle Arena) where two teams (Blue and Red) of five players compete over each other’s resources and neutral objectives to destroy the enemy base (Nexus). There are three lanes; Top, Middle (Mid), and Bottom (Bot), each with defensive structures (Towers or Turrets); a jungle, filled with neutral monsters that give gold, experience and some give buffs (power-ups); a River with epic neutral objectives that provide permanent buffs (Void Grubs and Dragons) and some that provide temporary boosts to your team (Elder Dragon, Baron and Rift Herald). After the 15 minute mark, teams have the option to surrender (colloquially known as “ff” for “forfeit”).\n\nContent\nThis dataset contains game metrics of the first 15 minutes of a match–games usually last between 25-35 minutes, but can surpass an hour. The data collected represents approximately 20,000 games of ranked solo queue (players can only queue up for a game with maximum one other person) from current Diamond Players (n.b. Patch 14.6, all games are from between March 20th and March 31st). The target value is blue_Wins (1 represents a Blue Team Victory, 0 represents a Red Team Victory)\nEach game is unique and there should be no missing values, match_id can be used to GET more data from the Riot Games API.\n\n\nGlossary\nWards: The in game map includes Fog of War, which means players can only see what is in their immediate vicinity. Wards are totems that players can drop to temporarily or permanently gain vision in areas.\n\nYellow Wards: Usable after level 1, a player may have up to 3 activate at any time, can be placed up to 600 units away, last 90-120 seconds (based on average champion level) or until they are destroyed (3 HP).\nSight Wards: Functionally the same as a Yellow Ward, usually placed by Supports (Please correct if wrong)\nBlue Wards: Only usable after level 9, a player may only have 1 active at any time, can be placed up to 4000 units away, last until they are destroyed (1 HP).\nControl Wards: Purchasable single-use wards available from level 1, a player may only have 1 activate at any time. Reveals invisible units, last until they are destroyed (4 HP)\n\nAce: When a team kills all members of the enemy team such that all enemy players are dead at a given moment.\nAssist: When a player helps secure a kill (but did not give the killing blow themself), either by damaging, using crowd control (slowing, stunning, etc), or buffing (healing, powering up) an ally that also participated in the kill.\nVoid Grub: A Neutral Epic Monster that gives players an increase in damage to enemy structures (Towers/Turrets, Inhibitors) increasing for every extra Void Grub defeated. Only 3 or 6 will spawn in a game, but not all need to be or will be killed. n.b. if a team kills 5 or 6 Void Grubs, they will periodically summon 1 or 2 Voidmites (little alien things) that assist in destroying objects).\nDragons: Neutral Epic Monster that grant permanent bonuses to a team. Only 3 types of non-Elder Dragons (Not included in this dataset as Elder cannot appear prior to 15 minutes) will spawn in a given game. 1. Cloud Drake: makes players faster 2. Infernal Drake: increases player attack damage and ability power 3. Mountain Drake: increases player armor and magic resistance 4. Ocean Drake: gives players extra health regeneration 5. Chemtech Drake: grants players resistance to crowd control and extra healing and shielding 6. Hextech Drake: increases the rate at which players can attack and use spells\nHerald: A Neutral Objective that assists players in destroying enemy structures\nTowers/Turrets: “Tower” and “Turret” are used interchangeably, these are defensive structures that must be destroyed to reach the enemy Nexus. There are 3 in each lane, and 2 at the enemy Nexus. They give gold and have plates\nTurret Plates: The first/outer turrets in each lane have 5 plates that grant extra resistances to the tower for the first 14 minutes. Each plate destroyed prior to 14 minutes grants additional gold.\nInhibitor: A structure at the enemy base, destroying this gives your minions additional power and at least one must be destroyed to destroy the enemy Nexus. They regenerate after a few minutes.\nGold: A resource earned by killing minions, jungle monsters, enemy players and destroying neutral objectives, enemy structures, wards. Gold is used to buy items to increase player strength.\nXP: XP and Experience used interchangeably–A resource earned by killing minions, jungle monsters, enemy players and destroying neutral objectives, enemy structures. XP allows a player to level-up, granting additonal strength and allowing players to learn new and upgrade abilities.\nLevel: Champion Level, starts at 1, maximum of 18.\nCS: Creep Score / Minions. Each team spawns minions in their lanes. Creep score is a count of how many minions a team has killed, (they must land the final blow on a creep to gain gold, but can gain XP by just being in the vicinity when one dies).\nJungle Monsters: Outside of the Lanes is the Jungle, filled with neutral monsters that grant gold, XP and some grant buffs\n\n\n\nExploratory Data Analysis\n\n\nShow Code\nimport pandas as pd\ndf = pd.read_csv(\"LoL_15_Diamond.csv\")\n\n\n\n\nShow Code\ndf.head()\n\n\n\n\n\n\n\n\n\nmatch_id\nblue_Win\nblue_Wards\nblue_Yellow_Wards\nblue_Sight_Wards\nblue_Blue_Wards\nblue_Control_Wards\nblue_Wards_Destroyed\nblue_First_Blood\nblue_Kills\n...\nred_Avg_Level\nred_Total_XP\nred_Total_CS\nred_Total_Jungle_Monsters\nred_Gold_Diff\nred_XP_Diff\nred_Magic_Dmg\nred_Physical_Dmg\nred_True_Dmg\nred_Total_Dmg\n\n\n\n\n0\nNA1_4959489871\n1.0\n22.0\n10.0\n9.0\n0.0\n2.0\n8.0\n1.0\n14.0\n...\n9.2\n28335.0\n300.0\n76.0\n-2925.0\n-620.0\n10969.0\n16477.0\n678.0\n28127.0\n\n\n1\nNA1_4959433709\n0.0\n63.0\n16.0\n3.0\n0.0\n2.0\n3.0\n0.0\n15.0\n...\n9.2\n28344.0\n317.0\n80.0\n1397.0\n-244.0\n8733.0\n23898.0\n1292.0\n33926.0\n\n\n2\nNA1_4959406776\n1.0\n26.0\n19.0\n2.0\n2.0\n3.0\n0.0\n1.0\n14.0\n...\n9.0\n27118.0\n337.0\n84.0\n-58.0\n-2804.0\n16146.0\n11446.0\n1893.0\n29490.0\n\n\n3\nNA1_4959124290\n1.0\n140.0\n18.0\n5.0\n0.0\n3.0\n6.0\n0.0\n17.0\n...\n9.0\n28779.0\n357.0\n70.0\n-3082.0\n-3642.0\n12668.0\n19022.0\n3303.0\n34994.0\n\n\n4\nNA1_4959103781\n1.0\n144.0\n20.0\n7.0\n0.0\n2.0\n3.0\n0.0\n18.0\n...\n9.0\n28009.0\n339.0\n86.0\n-5003.0\n-2592.0\n8574.0\n20283.0\n296.0\n29155.0\n\n\n\n\n5 rows × 89 columns"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jacob Anderson",
    "section": "",
    "text": "I’m a Data Scientist at TD Williamson. When I’m not developing data solutions, I enjoy traveling with my wife and playing board games with friends.\n\n\nTD Williamson | Data Scientist | June 2024 - Present\nLumea | Integrations Manager | June 2022 - Mar 2024\nLumea | Integrations Engineer | Feb 2021 - June 2022\nNuSkin | Tech Support Spanish Language | Nov 2017 - Jan 2021\n\n\n\nBrigham Young University | B.S. Applied Statistics\nArizona State University | M.S. Biological Data Science\n\n\n\n\n  \n  \n  \n    \n     Github\n  \n  \n    \n     Linkedin"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Jacob Anderson",
    "section": "",
    "text": "TD Williamson | Data Scientist | June 2024 - Present\nLumea | Integrations Manager | June 2022 - Mar 2024\nLumea | Integrations Engineer | Feb 2021 - June 2022\nNuSkin | Tech Support Spanish Language | Nov 2017 - Jan 2021"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Jacob Anderson",
    "section": "",
    "text": "Brigham Young University | B.S. Applied Statistics\nArizona State University | M.S. Biological Data Science"
  },
  {
    "objectID": "mario/index.html",
    "href": "mario/index.html",
    "title": "Mario Party",
    "section": "",
    "text": "Introduction and Findings\nIn Mario Party Jamboree, players roll a 10-sided die to determine how far they will travel on their turn. A player can also hold the A button to spin the die faster, also referred to as “charging”. The two questions we are going to explore are:\n\nAre the dice fair (Can they be modeled with a uniform distribution)?\n\nAs far as we can tell, the die are fair and a player has an even chance of rolling any number.\n\nDoes holding the A button make you roll higher?\n\nHolding the A button does not have a statistically significant effect on roll outcomes.\n\n\n\n\nShow Code\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.stats import chisquare\nimport numpy as np\ndata = pd.read_csv(\"marioparty.csv\")\n\n\n\n\nSampling\nIn order to answer these questions, I played a 30 turn game of Mario Party with my wife with each of us holding the A buttons, while the NPC’s (Non Player Characters) don’t charge. In total I collected 125 samples, with 59 being charged rolls and 66 uncharged.\n\n\n\nCharged\nUncharged\nTotal\n\n\n\n\n59\n66\n125\n\n\n\n\n\nAre the Dice Fair?\n\n\nShow Code\nbin_edges = range(1, 12)\n\nplt.hist(data['Number'], bins=bin_edges, color='lightpink', edgecolor='black', align='mid')\n\nplt.title('Histogram of Rolls')\nplt.ylabel('Frequency')\nplt.xlabel('Dice Roll')\n\nbin_centers = [i + 0.5 for i in range(1, 11)]\nplt.xticks(bin_centers, labels=range(1, 11))\n\nplt.show()\n\n\n\n\n\n\n\n\n\nThe rolls have a pretty strong positive-skew with the mode at 1, but otherwise appears fairly uniform. To analyze, we can perform a Chi-Squared Goodness of Fit Test to see whether or not the observed data fits a uniform distribution.\n\nChi-Squared Goodness of Fit\n\\[\nH_0: \\text {The dice follow a uniform distribution}\n\\]\n\\[\nH_a: \\text {The dice do not follow a uniform distributin}\n\\]\n\n\nShow Code\nn_faces = 10\nobserved_freq, bin_edges = np.histogram(data['Number'], bins=n_faces)\n\ntotal_count = len(data['Number'])\nexpected_freq = np.full(n_faces, total_count / n_faces)\n\nchi2_stat, p_value = chisquare(f_obs=observed_freq, f_exp=expected_freq)\n\nprint(f\"Chi-Squared Statistic: {chi2_stat:.2f}\")\nprint(f\"P-Value: {p_value:.2f}\")\n\nif p_value &gt; 0.05:\n    print(\"Fail to reject the null hypothesis: Insufficient evidence to suggest that the dice do not follow a uniform distribution.\")\nelse:\n    print(\"Reject the null hypothesis: The dice do not follow a uniform distribution.\")\n\n\nChi-Squared Statistic: 10.28\nP-Value: 0.33\nFail to reject the null hypothesis: Insufficient evidence to suggest that the dice do not follow a uniform distribution.\n\n\n\n\n\nDoes Holding the A button make you roll higher?\nIn order to determine whether or not there is a significant difference, I played a 30 turn game and collected a sample of 66 uncharged rolls and 59 charged rolls (125 total).\n\\[\nH_0: \\mu_{chargedDie} = \\mu_{unchargedDie}\n\\]\n\\[\nH_a: \\mu_{chargedDie} &gt; \\mu_{unchargedDie}\n\\]\n\n\nShow Code\ncharged_rolls = data[data['Charged?'] == 'Yes']['Number']\nuncharged_rolls = data[data['Charged?'] == 'No']['Number']\n\nbin_edges = range(1, 12)  # Bins for values 1 through 10\nbin_centers = [i + 0.5 for i in range(1, 11)]  # Center of each bin\n\nfig, axes = plt.subplots(1, 2, figsize=(12, 6))\n\naxes[0].hist(charged_rolls, alpha=0.5, bins=bin_edges, color='red', edgecolor='black', label='Charged Rolls', align='mid')\naxes[0].set_title(f'Charged Rolls, mean={charged_rolls.mean():.2f}')\naxes[0].set_xlabel('Roll Values')\naxes[0].set_ylabel('Frequency')\naxes[0].set_xticks(bin_centers)\naxes[0].set_xticklabels(range(1, 11))  # Label ticks as 1 to 10\n\naxes[1].hist(uncharged_rolls, alpha=0.5, bins=bin_edges, color='green', edgecolor='black', label='Uncharged Rolls', align='mid')\naxes[1].set_title(f'Uncharged Rolls, mean={uncharged_rolls.mean():.2f}')\naxes[1].set_xlabel('Roll Values')\naxes[1].set_ylabel('Frequency')\naxes[1].set_xticks(bin_centers)\naxes[1].set_xticklabels(range(1, 11))  # Label ticks as 1 to 10\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nThe distributions appear fairly similar, and charged_rolls has a lower mean (4.97 vs 5.59) which makes me immediately doubt the alternate hypothesis, but I’ll continue with two tests, a Kolmogorov-Smirnov (K-S) test to determine whether the charged_rolls and uncharged_rolls are significantly different and Bootstrap Sampling difference of means between the two distributions and calculating a confidence interval.\n\nKolmogorov-Smirnov Test\nThe K-S Test is used here to compare the two distributions and test whether or not they come from the same underlying distribution.\n\n\nShow Code\nfrom scipy.stats import ks_2samp\n\nks_statistic, p_value = ks_2samp(charged_rolls, uncharged_rolls)\n\nprint(f'K-S Statistic: {ks_statistic:.2f}')\nprint(f'P-value: {p_value:.2f}')\n\nif p_value &lt; 0.05:\n    print(\"The distributions are significantly different.\")\nelse:\n    print(\"The distributions are not significantly different.\")\n\n\nK-S Statistic: 0.13\nP-value: 0.63\nThe distributions are not significantly different.\n\n\n\n\nBootstrap Sampling\nFor our Bootstrap Sample we are going to:\n\nSample both charged_rolls and uncharged_rolls with replacement to create a new sample the same size as the original.\nFrom this we are going to take the mean of charged_rolls and uncharged_rolls\nCompute the difference between the mean of the bootstrap samples\nStore the difference\nRepeat Steps 1-4 n=10,000 times.\n\n\n\nShow Code\nn = 10000\n\nmean_differences = []\n\nfor _ in range(n):\n    charged_sample = np.random.choice(charged_rolls, size=len(charged_rolls), replace=True)\n    uncharged_sample = np.random.choice(uncharged_rolls, size=len(uncharged_rolls), replace=True)\n    \n    charged_mean = np.mean(charged_sample)\n    uncharged_mean = np.mean(uncharged_sample)\n    \n    mean_differences.append(charged_mean - uncharged_mean)\n\nmean_differences = np.array(mean_differences)\n\nlower_bound = np.percentile(mean_differences, 2.5)\nupper_bound = np.percentile(mean_differences, 97.5)\n\nplt.hist(mean_differences, bins=30, alpha=0.7, color='skyblue', edgecolor='black')\nplt.title('Bootstrap Distribution of Difference in Means (Charged - Uncharged)')\nplt.xlabel('Difference in Means')\nplt.ylabel('Frequency')\n\nplt.axvline(x=lower_bound, color='red', linestyle='--', label=f'2.5% CI: {lower_bound:.2f}')\nplt.axvline(x=upper_bound, color='red', linestyle='--', label=f'97.5% CI: {upper_bound:.2f}')\n\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\nThe 95% confidence interval of our bootstrapped difference in means contains 0, (and contains mostly negative values) so we reject the null hypothesis as there is not sufficient evidence to suggest that charged dice produce higher rolls than uncharged dice."
  }
]